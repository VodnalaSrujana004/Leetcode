You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

For example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".
Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.

 

Example 1:

example 1
Input: s = "letsleetcode", k = 2
Output: "let"
Explanation: There are two longest subsequences repeated 2 times: "let" and "ete".
"let" is the lexicographically largest one.
Example 2:

Input: s = "bb", k = 2
Output: "b"
Explanation: The longest subsequence repeated 2 times is "b".
Example 3:

Input: s = "ab", k = 2
Output: ""
Explanation: There is no subsequence repeated 2 times. Empty string is returned.
 

Constraints:

n == s.length
2 <= n, k <= 2000
2 <= n < k * 8
s consists of lowercase English letters.

---------------------------------------------------------------------


class Solution {
    private boolean isRepeatedKTimes(char[] source, String pattern, int k) {
        char[] pat = pattern.toCharArray();
        int sourceLen = source.length;
        int patLen = pat.length;
        int idx = 0;

        while (k-- > 0) {
            int match = 0;
            while (idx < sourceLen && match < patLen) {
                if (source[idx] == pat[match]) match++;
                idx++;
            }
            if (match != patLen) return false;
        }
        return true;
    }
    
    public String longestSubsequenceRepeatedK(String s, int k) {
        char[] chars = s.toCharArray();
        int len = chars.length;

        int[] freq = new int[26];
        for (int i = 0; i < len; i++) {
            freq[chars[i] - 'a']++;
        }

        ArrayList<String>[] candidates = new ArrayList[8];
        candidates[1] = new ArrayList<>();
        String result = "";

        for (int i = 0; i < 26; i++) {
            if (freq[i] >= k) {
                String ch = "" + (char) ('a' + i);
                result = ch;
                candidates[1].add(ch);
            }
        }

        for (int length = 2; length < 8; length++) {
            candidates[length] = new ArrayList<>();
            for (String prefix : candidates[length - 1]) {
                for (String suffix : candidates[1]) {
                    String combo = prefix + suffix;
                    if (isRepeatedKTimes(chars, combo, k)) {
                        result = combo;
                        candidates[length].add(combo);
                    }
                }
            }
        }
        return result;
    }
}
