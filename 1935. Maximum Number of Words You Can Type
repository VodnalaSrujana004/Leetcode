There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.

Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.

 

Example 1:

Input: text = "hello world", brokenLetters = "ad"
Output: 1
Explanation: We cannot type "world" because the 'd' key is broken.
Example 2:

Input: text = "leet code", brokenLetters = "lt"
Output: 1
Explanation: We cannot type "leet" because the 'l' and 't' keys are broken.
Example 3:

Input: text = "leet code", brokenLetters = "e"
Output: 0
Explanation: We cannot type either word because the 'e' key is broken.
 

Constraints:

1 <= text.length <= 104
0 <= brokenLetters.length <= 26
text consists of words separated by a single space without any leading or trailing spaces.
Each word only consists of lowercase English letters.
brokenLetters consists of distinct lowercase English letters.

----------------------------------------------------------------------------
Intuition
We are given a sentence and a set of broken letters.
A word is considered typeable if it does not contain any broken letter.
We need to count how many words can still be typed.

For example:
text = "hello world", brokenLetters = "ad"

"hello" → ✅ typeable
"world" → Not typeable
Answer = 1.
Approach
Initialize res = 0 to count typeable words.
Traverse the sentence with index wend:
If the current character is in brokenLetters, skip the entire word.
If we reach a space " " or the end of the string, increment res (since the word was valid).
Return the count.
Complexity
Time Complexity: O(n)
We traverse the input string once.
Space Complexity: O(1)
Only a few counters and sets are used.
Example Walkthrough
Input:
text = "leet code", brokenLetters = "e"
Steps:

"leet" → contains "e" → not typeable
"code" → contains "e" → not typeable
Answer = 0
Output:
0
-------------------------------------------------------------------------


class Solution {
    public int canBeTypedWords(String text, String brokenLetters) {
        int res = 0;
        int wend = 0;

        while (wend < text.length()) {
            if (brokenLetters.indexOf(text.charAt(wend)) != -1) {
                while (wend < text.length() && text.charAt(wend) != ' ') {
                    wend += 1;
                }
            } else if (text.charAt(wend) == ' ' || wend == text.length() - 1) {
                res += 1;
            }
            wend += 1;
        }
        return res;
    }
}

