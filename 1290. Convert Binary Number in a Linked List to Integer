Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.

The most significant bit is at the head of the linked list.

 

Example 1:


Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10
Example 2:

Input: head = [0]
Output: 0
 

Constraints:

The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.


-------------------------------------------------------------

class Solution {
    public int getDecimalValue(ListNode head) {
        int count = 1; // Initialize power multiplier
        int num = 0;   // Final decimal value
        ListNode cur = head;

        // First pass: find the length of the list to determine the initial power of 2
        while (cur != null) {
            cur = cur.next;
            count *= 2; // Double count for each node to simulate shifting left
        }

        count /= 2; // Adjust count (it will be one step too far after last iteration)

        cur = head; // Reset pointer to head

        // Second pass: compute decimal value
        while (cur != null) {
            num += cur.val * count; // Add the current bit's decimal contribution
            count /= 2;             // Move to the next lower power of 2
            cur = cur.next;
        }

        return num; // Return the final decimal number
    }
}
