You are given an integer array nums.

You are allowed to delete any number of elements from nums without making it empty. After performing the deletions, select a subarray of nums such that:

All elements in the subarray are unique.
The sum of the elements in the subarray is maximized.
Return the maximum sum of such a subarray.

 

Example 1:

Input: nums = [1,2,3,4,5]

Output: 15

Explanation:

Select the entire array without deleting any element to obtain the maximum sum.

Example 2:

Input: nums = [1,1,0,1,1]

Output: 1

Explanation:

Delete the element nums[0] == 1, nums[1] == 1, nums[2] == 0, and nums[3] == 1. Select the entire array [1] to obtain the maximum sum.

Example 3:

Input: nums = [1,2,-1,-2,1,0,-1]

Output: 3

Explanation:

Delete the elements nums[2] == -1 and nums[3] == -2, and select the subarray [2, 1] from [1, 2, 1, 0, -1] to obtain the maximum sum.

 

Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100

--------------------------------------------------------------------------

class Solution {
    public int maxSum(int[] nums) {
        // 1. Sort the nums array in ascending order.
        Arrays.sort(nums);

        // 2. Initialize the variables:
        // - sum: The current amount (starting with the largest element).
        int sum = nums[nums.length - 1];
        // - prev: The previous added element (starting with the largest element).
        int prev = sum;

        // 3. A loop running from the end of the array to the beginning, as long as two conditions are met:
        // a) i >= 0 (we do not go beyond the boundaries of the array).
        // b) nums[i] >= 0 (we continue only if the current element is >= 0).
        for (int i = nums.length - 2; i >= 0 && nums[i] >= 0; prev = nums[i], i--)
// 4. If the current element (nums[i]) differs from the previous one (prev),
// then add it to the amount.
            if (nums[i] != prev)
                sum += nums[i];

        // 5. We return the accumulated amount.
        return sum;
    }
}
