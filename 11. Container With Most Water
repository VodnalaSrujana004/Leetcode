You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104


---------------------------------------------



Intuition
We need to find two vertical lines such that they form a container with the maximum area.
The area is determined by:

Width = distance between lines
Height = min(height of both lines)
If we fix one line, the farther the other, the more area we can get, but height may limit it.
So we use two pointers:

Start with widest container (i=0, j=n-1).
Calculate area.
Move the pointer with the smaller height inward (because moving the larger height wonâ€™t help increase area).
Repeat until i < j.
Approach
Initialize two pointers: left = 0, right = n-1.
Compute area at each step:
area = min(height[left], height[right]) * (right - left)
Update maxArea if larger.
Move the pointer pointing to the smaller height.
Continue until left >= right.
Complexity
Time Complexity: O(n) (each pointer moves at most n steps).
Space Complexity: O(1) (only variables used).



class Solution {
    public int maxArea(int[] height) {
        int maxArea = 0;
        int i = 0, j = height.length - 1;

        while (i < j) {
            int currArea = Math.min(height[i], height[j]) * (j - i);
            maxArea = Math.max(maxArea, currArea);

            if (height[i] < height[j]) {
                i++;
            } else {
                j--;
            }
        }
        return maxArea;
    }
}
