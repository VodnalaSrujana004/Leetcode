Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.

Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.

 

Example 1:

Input: n = 4
Output: 10
Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.
Example 2:

Input: n = 10
Output: 37
Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.
Example 3:

Input: n = 20
Output: 96
Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.
 

Constraints:

1 <= n <= 1000


-------------------------------------------------------------


class Solution {
    public int totalMoney(int n) {
        int ans = 0;
    int monday = 1; // Starting amount for current week

    while (n > 0) {
    // Process min(n, 7) days in current week
    for (int day = 0; day < Math.min(n, 7); day++) {
        ans += monday + day; // Monday = 1, Tuesday = 2, etc.
        }
        n -= 7; // Reduce remaining days
        monday++; // Next week starts $1 more
    }
return ans;
}

----------------------------------------------


Intuition:
Hercy's savings follow a weekly pattern:

Week 1: 1,2, 3,...,7 (sum = 28)
Week 2: 2,3, 4,...,8 (sum = 35)
Week 3: 3,4, 5,...,9 (sum = 42)
...
Each week starts with monday = 1, 2, 3, ... and adds $1 each day. The code processes full weeks first, then the remaining days.
Approach:

Weekly Processing:
For each full week (7 days), calculate the sum as (monday + (monday + 6)) * 7 / 2 (arithmetic series).
But the code does this iteratively for simplicity.
Remaining Days:
After full weeks, process the leftover days (e.g., 3 days in Week 3: 3,4, $5).
Variables:
monday: Starting amount for the current week.
n: Remaining days to process.


ime Complexity: O(n)

Each day is processed exactly once (O(n) total operations).
For n=1000, it processes ~142 iterations (1000/7), but each iteration handles 1-7 days â†’ still O(n).
Space Complexity: O(1)

Only uses constant extra space (ans, monday, n).
