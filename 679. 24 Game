You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.

You are restricted with the following rules:

The division operator '/' represents real division, not integer division.
For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
For example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
You cannot concatenate numbers together
For example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
Return true if you can get such expression that evaluates to 24, and false otherwise.

 

Example 1:

Input: cards = [4,1,8,7]
Output: true
Explanation: (8-4) * (7-1) = 24
Example 2:

Input: cards = [1,2,1,2]
Output: false
 

Constraints:

cards.length == 4
1 <= cards[i] <= 9


------------------------------------------------

class Solution {
    static final double TARGET = 24.0;
    static final double EPS = 1e-4;

    public boolean judgePoint24(int[] cards) {
        List<Double> a = new ArrayList<>();
        for (int x : cards) a.add((double)x);
        return dfs(a);
    }

    private boolean dfs(List<Double> a) {
        int n = a.size();
        if (n == 1) return Math.abs(a.get(0) - TARGET) < EPS;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                double x = a.get(i), y = a.get(j);
                List<Double> rest = new ArrayList<>(n - 1);
                for (int k = 0; k < n; k++) if (k != i && k != j) rest.add(a.get(k));
                double[] cand = new double[]{x + y, x * y, x - y, y - x};
                for (double v : cand) {
                    rest.add(v);
                    if (dfs(rest)) return true;
                    rest.remove(rest.size() - 1);
                }
                if (Math.abs(y) > EPS) { rest.add(x / y); if (dfs(rest)) return true; rest.remove(rest.size() - 1); }
                if (Math.abs(x) > EPS) { rest.add(y / x); if (dfs(rest)) return true; rest.remove(rest.size() - 1); }
            }
        }
        return false;
    }
}



