Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2.00000
Explanation: The five points are shown in the above figure. The red triangle is the largest.
Example 2:

Input: points = [[1,0],[0,0],[0,1]]
Output: 0.50000
 

Constraints:

3 <= points.length <= 50
-50 <= xi, yi <= 50
All the given points are unique.


-----------------------------------
Intuition
This problem asks us to find the largest possible triangle area from a set of points. We need to consider all possible combinations of 3 points and calculate their triangle areas, keeping track of the maximum. The area calculation uses the shoelace formula (cross product method) which works for any three points in 2D space.

Approach
We'll use a triple nested loop with geometric area calculation:

Triple combination generation: Use three nested loops to generate all possible point triplets
Coordinate extraction: Extract x and y coordinates for each of the three points
Shoelace formula application: Use the determinant formula: Area = 0.5 Ã— |x1(y2-y3) + x2(y3-y1) + x3(y1-y2)|
Maximum tracking: Compare each calculated area with the current maximum
Absolute value: Ensure positive area regardless of point orientation
This approach guarantees finding the optimal solution by exhaustively checking all possible triangles.

Complexity
Time complexity: O(n 
3
 )
Where n is the number of points, as we examine all possible combinations of 3 points.

Space complexity: O(1)
We only use constant extra space for coordinate variables and area calculations.

Code (My approach)



class Solution {
    public double largestTriangleArea(int[][] points) {
        double maxArea = 0.0;
        int n = points.length;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                for (int k = j + 1; k < n; ++k) {
                    int x1 = points[i][0], y1 = points[i][1];
                    int x2 = points[j][0], y2 = points[j][1];
                    int x3 = points[k][0], y3 = points[k][1];
                    double area = 0.5 * Math.abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2));
                    maxArea = Math.max(maxArea, area);
                }
            }
        }
        return maxArea;
    }
}
