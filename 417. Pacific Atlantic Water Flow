There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.

The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).

The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.

Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.

 

Example 1:


Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:
[0,4]: [0,4] -> Pacific Ocean 
       [0,4] -> Atlantic Ocean
[1,3]: [1,3] -> [0,3] -> Pacific Ocean 
       [1,3] -> [1,4] -> Atlantic Ocean
[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean 
       [1,4] -> Atlantic Ocean
[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean 
       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean
[3,0]: [3,0] -> Pacific Ocean 
       [3,0] -> [4,0] -> Atlantic Ocean
[3,1]: [3,1] -> [3,0] -> Pacific Ocean 
       [3,1] -> [4,1] -> Atlantic Ocean
[4,0]: [4,0] -> Pacific Ocean 
       [4,0] -> Atlantic Ocean
Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.
Example 2:

Input: heights = [[1]]
Output: [[0,0]]
Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.
 

Constraints:

m == heights.length
n == heights[r].length
1 <= m, n <= 200
0 <= heights[r][c] <= 105


-----------------------------------------------------------------------


Intuition
The Pacific Ocean touches the top and left edges of the matrix, while the Atlantic Ocean touches the bottom and right edges.
Water can flow from a cell to another if the next cell has a height less than or equal to the current one.
Instead of simulating water flowing from each cell to the oceans (which would be inefficient), we reverse the direction:
➡️ Start from the oceans’ borders and move inwards, marking all cells that water can reach if it flows “uphill or flat.”
Finally, any cell reachable by both oceans means water can flow from that cell to both oceans.
Approach
Initialization

Get matrix dimensions m and n.
Create two boolean matrices:
pacific[m][n] — marks cells reachable from the Pacific.
atlantic[m][n] — marks cells reachable from the Atlantic.
Start DFS from border cells

For the Pacific Ocean:
Start DFS from the top row (row = 0) and left column (col = 0).
For the Atlantic Ocean:
Start DFS from the bottom row (row = m - 1) and right column (col = n - 1).
DFS Function (dfs)

Base conditions:
Stop if the cell is out of bounds.
Stop if the cell is already visited.
Stop if the current cell’s height is less than the previous cell’s height (can’t flow uphill).
Otherwise:
Mark the cell as visited.
Continue DFS to all 4 directions (up, down, left, right).
Find Intersection

After running DFS for both oceans, iterate through all cells.
If a cell is reachable in both pacific and atlantic, add its coordinates [i, j] to the result list.
Return Result

Return the result list containing all such cells.
Complexity
Time complexity:
O(m × n) — Each cell is visited at most twice (once per ocean).
Space complexity:
O(m × n) — For visited arrays and recursion call stack.

---------------------------------------------------------------------------------------


Code

class Solution {
    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        int m = heights.length;
        int n = heights[0].length;

        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];

        // DFS from Pacific (top & left) and Atlantic (bottom & right) borders
        for (int i = 0; i < m; i++) {
            dfs(heights, pacific, i, 0, heights[i][0]);      
            dfs(heights, atlantic, i, n - 1, heights[i][n - 1]); 
        }

        for (int j = 0; j < n; j++) {
            dfs(heights, pacific, 0, j, heights[0][j]);      
            dfs(heights, atlantic, m - 1, j, heights[m - 1][j]); 
        }

        // Collect cells reachable by both oceans
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (pacific[i][j] && atlantic[i][j]) {
                    result.add(Arrays.asList(i, j));
                }
            }
        }
        return result;
    }

    private void dfs(int[][] heights, boolean[][] visited, int r, int c, int prevHeight) {
        int m = heights.length;
        int n = heights[0].length;

        // Base cases
        if (r < 0 || r >= m || c < 0 || c >= n) return;
        if (visited[r][c]) return;
        if (heights[r][c] < prevHeight) return;

        visited[r][c] = true;

        // Explore in 4 directions
        dfs(heights, visited, r + 1, c, heights[r][c]);
        dfs(heights, visited, r - 1, c, heights[r][c]);
        dfs(heights, visited, r, c + 1, heights[r][c]);
        dfs(heights, visited, r, c - 1, heights[r][c]);
    }
}
