There exist two undirected trees with n and m nodes, with distinct labels in ranges [0, n - 1] and [0, m - 1], respectively.

You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree. You are also given an integer k.

Node u is target to node v if the number of edges on the path from u to v is less than or equal to k. Note that a node is always target to itself.

Return an array of n integers answer, where answer[i] is the maximum possible number of nodes target to node i of the first tree if you have to connect one node from the first tree to another node in the second tree.

Note that queries are independent from each other. That is, for every query you will remove the added edge before proceeding to the next query.

 

Example 1:

Input: edges1 = [[0,1],[0,2],[2,3],[2,4]], edges2 = [[0,1],[0,2],[0,3],[2,7],[1,4],[4,5],[4,6]], k = 2

Output: [9,7,9,8,8]

Explanation:

For i = 0, connect node 0 from the first tree to node 0 from the second tree.
For i = 1, connect node 1 from the first tree to node 0 from the second tree.
For i = 2, connect node 2 from the first tree to node 4 from the second tree.
For i = 3, connect node 3 from the first tree to node 4 from the second tree.
For i = 4, connect node 4 from the first tree to node 4 from the second tree.

Example 2:

Input: edges1 = [[0,1],[0,2],[0,3],[0,4]], edges2 = [[0,1],[1,2],[2,3]], k = 1

Output: [6,3,3,3,3]

Explanation:

For every i, connect node i of the first tree with any node of the second tree.


 

Constraints:

2 <= n, m <= 1000
edges1.length == n - 1
edges2.length == m - 1
edges1[i].length == edges2[i].length == 2
edges1[i] = [ai, bi]
0 <= ai, bi < n
edges2[i] = [ui, vi]
0 <= ui, vi < m
The input is generated such that edges1 and edges2 represent valid trees.
0 <= k <= 1000

-----------------------------------------------------------------------------------------


class Solution {
        public int[] maxTargetNodes(int[][] edges1, int[][] edges2, int k) {
                int m = edges1.length + 1;
                        int[] ans = new int[m];
                                
                                        // Handle k=0 case (each node is its own target)
                                                if (k == 0) {
                                                            Arrays.fill(ans, 1);
                                                                        return ans;
                                                                                }
                                                                                        
                                                                                                int n = edges2.length + 1;
                                                                                                        List<List<Integer>> t1 = new ArrayList<>();
                                                                                                                List<List<Integer>> t2 = new ArrayList<>();
                                                                                                                        
                                                                                                                                // Initialize adjacency lists
                                                                                                                                        for (int i = 0; i < m; i++) t1.add(new ArrayList<>());
                                                                                                                                                for (int i = 0; i < n; i++) t2.add(new ArrayList<>());
                                                                                                                                                        
                                                                                                                                                                // Preprocess trees
                                                                                                                                                                        preprocess(edges1, t1);
                                                                                                                                                                                preprocess(edges2, t2);
                                                                                                                                                                                        
                                                                                                                                                                                                // Find maximum reachable in tree2 at k-1 distance
                                                                                                                                                                                                        int maxFromT2 = k != 1 ? findMax(t2, k - 1) : 1;
                                                                                                                                                                                                                
                                                                                                                                                                                                                        // Calculate for each node in tree1
                                                                                                                                                                                                                                for (int i = 0; i < m; i++) {
                                                                                                                                                                                                                                            ans[i] = bfsCount(t1, i, k) + maxFromT2;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                    return ans;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                private void preprocess(int[][] edges, List<List<Integer>> tree) {
                                                                                                                                                                                                                                                                                        for (int[] edge : edges) {
                                                                                                                                                                                                                                                                                                    tree.get(edge[0]).add(edge[1]);
                                                                                                                                                                                                                                                                                                                tree.get(edge[1]).add(edge[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                                                                    private int findMax(List<List<Integer>> tree, int k) {
                                                                                                                                                                                                                                                                                                                                            int maxCount = 1;
                                                                                                                                                                                                                                                                                                                                                    for (int i = 0; i < tree.size(); i++) {
                                                                                                                                                                                                                                                                                                                                                                maxCount = Math.max(maxCount, bfsCount(tree, i, k));
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                return maxCount;
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                                                            private int bfsCount(List<List<Integer>> tree, int start, int k) {
                                                                                                                                                                                                                                                                                                                                                                                                    Queue<Integer> q = new LinkedList<>();
                                                                                                                                                                                                                                                                                                                                                                                                            boolean[] visited = new boolean[tree.size()];
                                                                                                                                                                                                                                                                                                                                                                                                                    int count = 1;
                                                                                                                                                                                                                                                                                                                                                                                                                            int level = 1;
                                                                                                                                                                                                                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                                                                                                                                                                                                                            q.offer(start);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    visited[start] = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    while (level <= k && !q.isEmpty()) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                int size = q.size();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            for (int i = 0; i < size; i++) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            int node = q.poll();
for (int neighbor : tree.get(node)) {
if (!visited[neighbor]) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        visited[neighbor] = true;
q.offer(neighbor);
count++;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
}
}
level++;
}
return count;
}

}
